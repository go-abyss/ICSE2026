/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/MinwooWebeng/abyss_core/native_dll */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "dllmain.go"


#include <stdint.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) int Init();
extern __declspec(dllexport) int GetErrorBodyLength(uintptr_t h_error);
extern __declspec(dllexport) int GetErrorBody(uintptr_t h_error, char* buf_ptr, int buf_len);
extern __declspec(dllexport) void CloseAbyssHandle(uintptr_t handle);
extern __declspec(dllexport) uintptr_t NewSimplePathResolver();
extern __declspec(dllexport) void SimplePathResolver_SetMapping(uintptr_t h, char* path_ptr, int path_len, char* world_ID, uintptr_t* err_out);
extern __declspec(dllexport) int SimplePathResolver_DeleteMapping(uintptr_t h, char* path_ptr, int path_len);
extern __declspec(dllexport) uintptr_t NewSimpleAbystServer(char* path_ptr, int path_len);
extern __declspec(dllexport) uintptr_t NewHost(char* root_priv_key_pem_ptr, int root_priv_key_pem_len, uintptr_t h_path_resolver, uintptr_t h_abyst_server);
extern __declspec(dllexport) int Host_GetLocalAbyssURL(uintptr_t h, char* buf_ptr, int buf_len);
extern __declspec(dllexport) int Host_GetCertificates(uintptr_t h, char* root_cert_buf_ptr, int* root_cert_len, char* hs_key_cert_buf_ptr, int* hs_key_cert_len);
extern __declspec(dllexport) void Host_AppendKnownPeer(uintptr_t h, char* root_cert_buf_ptr, int root_cert_len, char* hs_key_cert_buf_ptr, int hs_key_cert_len, uintptr_t* err_out);
extern __declspec(dllexport) int Host_OpenOutboundConnection(uintptr_t h, char* abyss_url_ptr, int abyss_url_len);
extern __declspec(dllexport) uintptr_t Host_OpenWorld(uintptr_t h, char* url_ptr, int url_len);
extern __declspec(dllexport) uintptr_t Host_JoinWorld(uintptr_t h, char* url_ptr, int url_len, int timeout_ms);
extern __declspec(dllexport) int Host_WriteANDStatisticsLogFile(uintptr_t h);
extern __declspec(dllexport) int World_GetSessionID(uintptr_t h, char* world_ID_out);
extern __declspec(dllexport) int World_GetURL(uintptr_t h, char* buf_ptr, int buf_len);
extern __declspec(dllexport) uintptr_t World_WaitEvent(uintptr_t h, int* event_type_out);
extern __declspec(dllexport) int WorldPeerRequest_GetHash(uintptr_t h, char* buf, int buf_len);
extern __declspec(dllexport) int WorldPeerRequest_Accept(uintptr_t h);
extern __declspec(dllexport) int WorldPeerRequest_Decline(uintptr_t h, int code, char* msg, int msglen);
extern __declspec(dllexport) int WorldPeer_GetHash(uintptr_t h, char* buf, int buf_len);
extern __declspec(dllexport) int WorldPeer_AppendObjects(uintptr_t h, char* json_ptr, int json_len);
extern __declspec(dllexport) int WorldPeer_DeleteObjects(uintptr_t h, char* json_ptr, int json_len);
extern __declspec(dllexport) int WorldPeerObjectAppend_GetHead(uintptr_t h, char* peer_hash_out, int* body_len);
extern __declspec(dllexport) int WorldPeerObjectAppend_GetBody(uintptr_t h, char* buf, int buf_len);
extern __declspec(dllexport) int WorldPeerObjectDelete_GetHead(uintptr_t h, char* peer_hash_out, int* body_len);
extern __declspec(dllexport) int WorldPeerObjectDelete_GetBody(uintptr_t h, char* buf, int buf_len);
extern __declspec(dllexport) int WorldPeerLeave_GetHash(uintptr_t h, char* buf, int buf_len);
extern __declspec(dllexport) int WorldLeave(uintptr_t h);
extern __declspec(dllexport) uintptr_t Host_GetAbystClientConnection(uintptr_t h, char* peer_hash_ptr, int peer_hash_len, int timeout_ms, uintptr_t* err_out);
extern __declspec(dllexport) uintptr_t AbystClient_Request(uintptr_t h, int method, char* path_ptr, int path_len, uintptr_t* err_out);
extern __declspec(dllexport) int AbyssResponse_GetHeaders(uintptr_t h, char* buf, int buf_len);
extern __declspec(dllexport) int AbyssResponse_GetContentLength(uintptr_t h);
extern __declspec(dllexport) int AbystResponse_ReadBody(uintptr_t h, char* buf_ptr, int buf_len);
extern __declspec(dllexport) int AbystResponse_ReadBodyAll(uintptr_t h, char* buf_ptr, int buf_len);

#ifdef __cplusplus
}
#endif
